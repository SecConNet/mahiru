# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.workflow_step import WorkflowStep  # noqa: F401,E501
from swagger_server import util


class Workflow(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, inputs: List[str]=None, outputs: Dict[str, str]=None, steps: List[WorkflowStep]=None):  # noqa: E501
        """Workflow - a model defined in Swagger

        :param inputs: The inputs of this Workflow.  # noqa: E501
        :type inputs: List[str]
        :param outputs: The outputs of this Workflow.  # noqa: E501
        :type outputs: Dict[str, str]
        :param steps: The steps of this Workflow.  # noqa: E501
        :type steps: List[WorkflowStep]
        """
        self.swagger_types = {
            'inputs': List[str],
            'outputs': Dict[str, str],
            'steps': List[WorkflowStep]
        }

        self.attribute_map = {
            'inputs': 'inputs',
            'outputs': 'outputs',
            'steps': 'steps'
        }
        self._inputs = inputs
        self._outputs = outputs
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt) -> 'Workflow':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Workflow of this Workflow.  # noqa: E501
        :rtype: Workflow
        """
        return util.deserialize_model(dikt, cls)

    @property
    def inputs(self) -> List[str]:
        """Gets the inputs of this Workflow.


        :return: The inputs of this Workflow.
        :rtype: List[str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: List[str]):
        """Sets the inputs of this Workflow.


        :param inputs: The inputs of this Workflow.
        :type inputs: List[str]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def outputs(self) -> Dict[str, str]:
        """Gets the outputs of this Workflow.


        :return: The outputs of this Workflow.
        :rtype: Dict[str, str]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: Dict[str, str]):
        """Sets the outputs of this Workflow.


        :param outputs: The outputs of this Workflow.
        :type outputs: Dict[str, str]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs

    @property
    def steps(self) -> List[WorkflowStep]:
        """Gets the steps of this Workflow.


        :return: The steps of this Workflow.
        :rtype: List[WorkflowStep]
        """
        return self._steps

    @steps.setter
    def steps(self, steps: List[WorkflowStep]):
        """Sets the steps of this Workflow.


        :param steps: The steps of this Workflow.
        :type steps: List[WorkflowStep]
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps
