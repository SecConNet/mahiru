# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class WorkflowStep(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, inputs: Dict[str, str]=None, outputs: List[str]=None, compute_asset_id: str=None):  # noqa: E501
        """WorkflowStep - a model defined in Swagger

        :param name: The name of this WorkflowStep.  # noqa: E501
        :type name: str
        :param inputs: The inputs of this WorkflowStep.  # noqa: E501
        :type inputs: Dict[str, str]
        :param outputs: The outputs of this WorkflowStep.  # noqa: E501
        :type outputs: List[str]
        :param compute_asset_id: The compute_asset_id of this WorkflowStep.  # noqa: E501
        :type compute_asset_id: str
        """
        self.swagger_types = {
            'name': str,
            'inputs': Dict[str, str],
            'outputs': List[str],
            'compute_asset_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'inputs': 'inputs',
            'outputs': 'outputs',
            'compute_asset_id': 'compute_asset_id'
        }
        self._name = name
        self._inputs = inputs
        self._outputs = outputs
        self._compute_asset_id = compute_asset_id

    @classmethod
    def from_dict(cls, dikt) -> 'WorkflowStep':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowStep of this WorkflowStep.  # noqa: E501
        :rtype: WorkflowStep
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this WorkflowStep.


        :return: The name of this WorkflowStep.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this WorkflowStep.


        :param name: The name of this WorkflowStep.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def inputs(self) -> Dict[str, str]:
        """Gets the inputs of this WorkflowStep.


        :return: The inputs of this WorkflowStep.
        :rtype: Dict[str, str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: Dict[str, str]):
        """Sets the inputs of this WorkflowStep.


        :param inputs: The inputs of this WorkflowStep.
        :type inputs: Dict[str, str]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def outputs(self) -> List[str]:
        """Gets the outputs of this WorkflowStep.


        :return: The outputs of this WorkflowStep.
        :rtype: List[str]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs: List[str]):
        """Sets the outputs of this WorkflowStep.


        :param outputs: The outputs of this WorkflowStep.
        :type outputs: List[str]
        """
        if outputs is None:
            raise ValueError("Invalid value for `outputs`, must not be `None`")  # noqa: E501

        self._outputs = outputs

    @property
    def compute_asset_id(self) -> str:
        """Gets the compute_asset_id of this WorkflowStep.


        :return: The compute_asset_id of this WorkflowStep.
        :rtype: str
        """
        return self._compute_asset_id

    @compute_asset_id.setter
    def compute_asset_id(self, compute_asset_id: str):
        """Sets the compute_asset_id of this WorkflowStep.


        :param compute_asset_id: The compute_asset_id of this WorkflowStep.
        :type compute_asset_id: str
        """
        if compute_asset_id is None:
            raise ValueError("Invalid value for `compute_asset_id`, must not be `None`")  # noqa: E501

        self._compute_asset_id = compute_asset_id
