# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from proof_of_concept.asset_store_server.models.base_model_ import Model
from proof_of_concept.asset_store_server.models.workflow import Workflow  # noqa: F401,E501
from proof_of_concept import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, workflow: Workflow=None, inputs: Dict[str, str]=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param workflow: The workflow of this Job.  # noqa: E501
        :type workflow: Workflow
        :param inputs: The inputs of this Job.  # noqa: E501
        :type inputs: Dict[str, str]
        """
        self.swagger_types = {
            'workflow': Workflow,
            'inputs': Dict[str, str]
        }

        self.attribute_map = {
            'workflow': 'workflow',
            'inputs': 'inputs'
        }
        self._workflow = workflow
        self._inputs = inputs

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow(self) -> Workflow:
        """Gets the workflow of this Job.


        :return: The workflow of this Job.
        :rtype: Workflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow: Workflow):
        """Sets the workflow of this Job.


        :param workflow: The workflow of this Job.
        :type workflow: Workflow
        """
        if workflow is None:
            raise ValueError("Invalid value for `workflow`, must not be `None`")  # noqa: E501

        self._workflow = workflow

    @property
    def inputs(self) -> Dict[str, str]:
        """Gets the inputs of this Job.


        :return: The inputs of this Job.
        :rtype: Dict[str, str]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs: Dict[str, str]):
        """Sets the inputs of this Job.


        :param inputs: The inputs of this Job.
        :type inputs: Dict[str, str]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs
