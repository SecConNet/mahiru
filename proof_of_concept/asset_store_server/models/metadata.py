# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.job import Job  # noqa: F401,E501
from swagger_server import util


class Metadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, job: Job=None, item: str=None):  # noqa: E501
        """Metadata - a model defined in Swagger

        :param job: The job of this Metadata.  # noqa: E501
        :type job: Job
        :param item: The item of this Metadata.  # noqa: E501
        :type item: str
        """
        self.swagger_types = {
            'job': Job,
            'item': str
        }

        self.attribute_map = {
            'job': 'job',
            'item': 'item'
        }
        self._job = job
        self._item = item

    @classmethod
    def from_dict(cls, dikt) -> 'Metadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metadata of this Metadata.  # noqa: E501
        :rtype: Metadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job(self) -> Job:
        """Gets the job of this Metadata.


        :return: The job of this Metadata.
        :rtype: Job
        """
        return self._job

    @job.setter
    def job(self, job: Job):
        """Sets the job of this Metadata.


        :param job: The job of this Metadata.
        :type job: Job
        """
        if job is None:
            raise ValueError("Invalid value for `job`, must not be `None`")  # noqa: E501

        self._job = job

    @property
    def item(self) -> str:
        """Gets the item of this Metadata.


        :return: The item of this Metadata.
        :rtype: str
        """
        return self._item

    @item.setter
    def item(self, item: str):
        """Sets the item of this Metadata.


        :param item: The item of this Metadata.
        :type item: str
        """
        if item is None:
            raise ValueError("Invalid value for `item`, must not be `None`")  # noqa: E501

        self._item = item
